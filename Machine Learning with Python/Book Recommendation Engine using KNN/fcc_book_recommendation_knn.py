# -*- coding: utf-8 -*-
"""Kopie von fcc_book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XrYFmjPTET2tvY7s17Vp9KNibn3fTedm
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt


books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# remove users from df_ratings with <200 ratings and books from df_books with <100 ratings
num_ratings= df_ratings.groupby('user').size()
usersinclude  = num_ratings[num_ratings>=200].index
num_ratings= df_ratings.groupby('isbn').size()
booksinclude  = num_ratings[num_ratings>=100].index
ratings_new = df_ratings[df_ratings['user'].isin(usersinclude)]
ratings_new = ratings_new[ratings_new['isbn'].isin(booksinclude)]

merged_df = pd.merge(df_books, ratings_new, on='isbn', how='inner')
merged_df_clean = merged_df.drop_duplicates(["title", "user"]) # drop all the duplicates

df_pivot = merged_df_clean.pivot(index='title', columns='user', values='rating').fillna(0)

# Develop a model that shows books similar to a  given book
n_neighbors = 5
x = df_pivot.values
nbrs_model = NearestNeighbors(n_neighbors=n_neighbors+1,algorithm='auto',metric='cosine').fit(x)

# # function to return recommended books - this will be tested
def get_recommends(book):
    
    distances,indices = nbrs_model.kneighbors(df_pivot.loc[book].values.reshape(1,-1))
    distances= distances.flatten().tolist()
    indices= indices.flatten().tolist()

    nearest_books= df_pivot.index[indices[1:]].tolist()
    nearest_books_dist = distances[1:]
    book_list=[]

    for i in range(len(nearest_books)-1,0,-1):
       book_list.append([nearest_books[i],nearest_books_dist[i]]) 
       
    recommended_books = [df_pivot.index[indices[0]],book_list]
       
    return recommended_books

# book_title = "Where the Heart Is (Oprah's Book Club (Paperback))"
book_title= "Where the Heart Is (Oprah's Book Club (Paperback))"
books = get_recommends(book_title)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()